[[plugins]]
repo = 'Shougo/dein.vim'

[[plugins]]
repo = 'w0ng/vim-hybrid'

[[plugins]]
repo = 'Shougo/denite.nvim'
depends = 'neoyank.vim'
hook_add = '''
  call dein#add('w1mvy/vim-denite-tab') " add tab plugin

  autocmd FileType denite call s:denite_mappings()
  function! s:denite_mappings() abort
    nnoremap <silent><buffer><expr> <CR> denite#do_map('do_action')
    nnoremap <silent><buffer><expr> <Tab> denite#do_map('choose_action')
    nnoremap <silent><buffer><expr> d denite#do_map('do_action', 'delete')
    nnoremap <silent><buffer><expr> p denite#do_map('do_action', 'preview')
    nnoremap <silent><buffer><expr> q denite#do_map('quit')
    nnoremap <silent><buffer><expr> i denite#do_map('open_filter_buffer') " 絞り込みをするためのモード切り替え
    nnoremap <silent><buffer><expr> <Space> denite#do_map('toggle_select').'j' " 複数アイテムを選択
  endfunction

  " filterしているときでもカーソル移動とenter押下を行える
  autocmd FileType denite-filter call s:denite_filter_my_settings()
  function! s:denite_filter_my_settings() abort
    inoremap <silent><buffer><expr> <CR> denite#do_map('do_action')
    inoremap <silent><buffer><expr> <C-j> denite#increment_parent_cursor(1)
    inoremap <silent><buffer><expr> <C-k> denite#increment_parent_cursor(-1)
  endfunction

  let s:denite_win_width_percent = 0.9
  let s:denite_win_height_percent = 0.5
  let s:vvv = v:true
  call denite#custom#option('default', {
      \ 'split': 'floating',
      \ 'winwidth': float2nr(&columns * s:denite_win_width_percent),
      \ 'wincol': float2nr((&columns - (&columns * s:denite_win_width_percent)) / 2),
      \ 'winheight': float2nr(&lines * s:denite_win_height_percent),
      \ 'winrow': float2nr((&lines - (&lines * s:denite_win_height_percent)) / 1.3),
      \ 'highlight_matched_char': "None",
      \ 'highlight_matched_range': "Search",
      \ 'match_highlight': v:true
      \ })

  nnoremap <silent> <space>b :<C-u>Denite buffer <CR>
  nnoremap <silent> <space>l :<C-u>Denite tab  <CR>
  nnoremap <silent> <space>y :<C-u>Denite neoyank <CR>
  nnoremap <silent> <space>h :<C-u>Denite file/old <CR>
'''

[[plugins]]
repo = 'Shougo/neoyank.vim'

[[plugins]]
repo = 'Shougo/unite.vim'

[[plugins]]
repo = 'Shougo/vimfiler.vim'
depends = 'unite.vim'
hook_add = '''
  let g:vimfiler_as_default_explorer = 1
  let g:vimfiler_tree_opened_icon = "▾"
  let g:vimfiler_tree_closed_icon = "▸"
  let g:vimfiler_tree_leaf_icon = ' '
  let g:vimfiler_safe_mode_by_default = 0
  let g:vimfiler_enable_auto_cd = 1
  let g:vimfiler_force_overwrite_statusline = 0

  nnoremap <silent> <space>e :VimFilerExplorer -toggle<CR>
  nnoremap <silent> <space>n :VimFilerExplorer -find -status<CR>
  autocmd BufEnter * if (winnr('$') == 1 && &filetype ==# 'vimfiler') | q | endif
  autocmd FileType vimfiler nnoremap <silent><buffer><expr> tn vimfiler#do_action('tabopen')
'''

[[plugins]]
repo = 'itchyny/lightline.vim'
hook_add = '''
  let g:lightline = {
    \ 'colorscheme': 'wombat',
    \ 'active': {
    \   'left': [ [ 'mode', 'paste' ],
    \             [ 'fugitive', 'filename' ] ]
    \ },
    \ 'component_function': {
    \   'fugitive': 'LightLineFugitive',
    \   'readonly': 'LightLineReadonly',
    \   'modified': 'LightLineModified',
    \   'filename': 'LightLineFilename'
    \ },
  \ }
  
  function! LightLineModified()
    if &filetype == "help"
      return ""
    elseif &modified
      return "+"
    elseif &modifiable
      return ""
    else
      return ""
    endif
  endfunction
  
  function! LightLineReadonly()
    if &filetype == "help"
      return ""
    elseif &readonly
      return "(ro)"
    else
      return ""
    endif
  endfunction
  
  function! LightLineFugitive()
    return exists('*fugitive#head') ? fugitive#head() : ''
  endfunction
  
  function! LightLineFilename()
    return ('' != LightLineReadonly() ? LightLineReadonly() . ' ' : '') .
         \ ('' != expand('%:p') ? expand('%:p') : '[No Name]') .
         \ ('' != LightLineModified() ? ' ' . LightLineModified() : '')
  endfunction
'''

[[plugins]]
repo = 'szw/vim-tags'
hook_add = '''
  if executable('ctags')
    function! GetDocker()
      if $APP_CONTAINER_NAME != ''
        let container_id = system('docker ps --filter name=$APP_CONTAINER_NAME -q')

        if container_id != ''
          return 'docker exec -t ' . container_id . ' '
        endif
      endif

      return ''
    endfunction

    let g:vim_tags_auto_generate = 1
    let g:vim_tags_project_tags_command = "{CTAGS} -R {OPTIONS} {DIRECTORY} 2>/dev/null"

    let g:vim_tags_gems_tags_command = "{CTAGS} -R {OPTIONS} `" . GetDocker() . " bundle show --paths` 2>/dev/null"
    nnoremap <space>] :<C-u>tab stj <C-R>=expand('<cword>')<CR><CR>
  endif
'''

[[plugins]]
repo = 'easymotion/vim-easymotion'
hook_add = '''
  let g:EasyMotion_do_mapping = 0
  let g:EasyMotion_keys='hjklasdfgyuiopqwertnmzxcvbHJKLASDFGYUIOPQWERTNMZXCVB'
  let g:EasyMotion_grouping=1
  let g:EasyMotion_smartcase = 1
  let g:EasyMotion_enter_jump_first = 1
  let g:EasyMotion_space_jump_first = 1    

  vmap          t <Plug>(easymotion-s)
  nmap          t <Plug>(easymotion-s)
  imap <C-f> <C-o><Plug>(easymotion-s)

  map ; <Plug>(easymotion-next)
  map , <Plug>(easymotion-prev)

  map           m <Plug>(easymotion-bd-fl)
  imap <C-v> <C-o><Plug>(easymotion-bd-fl)

  map  <Space>j <Plug>(easymotion-j)
  map  <Space>k <Plug>(easymotion-k)
'''

[[plugins]]
repo = 'w0rp/ale'
hook_add = '''
  let g:ale_sign_error = '>>'
  let g:ale_sign_warning = '--'
'''

[[plugins]]
repo = 'prabirshrestha/vim-lsp'

[[plugins]]
repo = 'mattn/vim-lsp-settings'

[[plugins]]
repo = 'prabirshrestha/asyncomplete.vim'
hook_add = '''
  " let g:asyncomplete_log_file = expand('~/asyncomplete.log')

  imap <c-space> <Plug>(asyncomplete_force_refresh)
  inoremap <expr> <Tab>   pumvisible() ? "\<C-n>" : "\<Tab>"
  inoremap <expr> <S-Tab> pumvisible() ? "\<C-p>" : "\<S-Tab>"
  inoremap <expr> <cr>    pumvisible() ? asyncomplete#close_popup() : "\<cr>"
'''

[[plugins]]
repo = 'prabirshrestha/asyncomplete-lsp.vim'

